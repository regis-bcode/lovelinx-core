// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const FALLBACK_SUPABASE_URL = "https://mmghpkoumxqbuwebkjxo.supabase.co";
const FALLBACK_SUPABASE_ANON_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1tZ2hwa291bXhxYnV3ZWJraGhvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1OTMxNjAsImV4cCI6MjA3MzE2OTE2MH0.-BUg9T_PsTXCGalZEp1ozwgVaGJ0uCXrMnShbi-84c0";

const importMetaEnv = (() => {
  try {
    return ((import.meta as any)?.env ?? {}) as Record<string, string | undefined>;
  } catch (error) {
    console.warn("Unable to access import.meta.env for Supabase configuration:", error);
    return {} as Record<string, string | undefined>;
  }
})();

const processEnv = (() => {
  try {
    const env = (globalThis as any)?.process?.env;
    if (env && typeof env === "object") {
      return env as Record<string, string | undefined>;
    }
  } catch {
    // Ignora ambientes sem suporte a process.env (como o navegador).
  }

  return {} as Record<string, string | undefined>;
})();

const resolvedSupabaseUrl =
  importMetaEnv?.VITE_SUPABASE_URL?.trim() ||
  processEnv?.VITE_SUPABASE_URL?.trim() ||
  FALLBACK_SUPABASE_URL;

const resolvedSupabaseAnonKey =
  importMetaEnv?.VITE_SUPABASE_ANON_KEY?.trim() ||
  processEnv?.VITE_SUPABASE_ANON_KEY?.trim() ||
  FALLBACK_SUPABASE_ANON_KEY;

if (!importMetaEnv?.VITE_SUPABASE_URL && !processEnv?.VITE_SUPABASE_URL) {
  console.warn(
    "[supabase] VITE_SUPABASE_URL não definido. Usando o fallback embutido; configure a variável de ambiente para evitar quebras futuras.",
  );
}

if (!importMetaEnv?.VITE_SUPABASE_ANON_KEY && !processEnv?.VITE_SUPABASE_ANON_KEY) {
  console.warn(
    "[supabase] VITE_SUPABASE_ANON_KEY não definido. Usando o fallback embutido; configure a variável de ambiente para evitar quebras futuras.",
  );
}

export const SUPABASE_URL = resolvedSupabaseUrl;
export const SUPABASE_ANON_KEY = resolvedSupabaseAnonKey;
export const SUPABASE_FUNCTIONS_URL = `${SUPABASE_URL}/functions/v1`;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const createMemoryStorage = (): Storage => {
  let store: Record<string, string> = {};

  return {
    get length() {
      return Object.keys(store).length;
    },
    clear() {
      store = {};
    },
    getItem(key: string) {
      return Object.prototype.hasOwnProperty.call(store, key) ? store[key] : null;
    },
    key(index: number) {
      const keys = Object.keys(store);
      return index >= 0 && index < keys.length ? keys[index] : null;
    },
    removeItem(key: string) {
      delete store[key];
    },
    setItem(key: string, value: string) {
      store[key] = value;
    },
  } as Storage;
};

const resolveBrowserStorage = (): Storage | null => {
  if (typeof window === "undefined") {
    return null;
  }

  try {
    const { localStorage } = window;
    const testKey = "__storage_test__";
    localStorage.setItem(testKey, testKey);
    localStorage.removeItem(testKey);
    return localStorage;
  } catch (error) {
    console.warn("Falling back to in-memory storage for Supabase auth:", error);
    return null;
  }
};

const storage: Storage = resolveBrowserStorage() ?? createMemoryStorage();

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    storage,
    persistSession: true,
    autoRefreshToken: true,
  },
  functions: {
    /**
     * Explicitly route Edge Function calls through the project base URL.
     * Some environments have trouble resolving the `*.functions.supabase.co`
     * subdomain used by default, which surfaces as
     * "Failed to send a request to the Edge Function" errors. By pointing the
     * client to `${SUPABASE_URL}/functions/v1` we leverage the already-allowed
     * primary domain and avoid those resolution issues while keeping the same
     * authentication behaviour.
     */
    url: `${SUPABASE_URL}/functions/v1`,
  },
});
